CREATE TABLE book( /*создание таблицы book*/
  book_id INT PRIMARY KEY, /*целое уникальное число автоматически генерируемое*/
  title VARCHAR(30), /*строка до 30 символов*/
  author VARCHAR(10), /*строка до 10 символов*/
  price DECIMAL(8, 2), /*до 8 цифр до запятой, до 2 цифры после запятой*/
  amount INT /*целое число*/
); /*; обязательно*/

INSERT INTO таблица(поле1, поле2) /* добавить значения в таблицу, перечисляются все ключи (кроме автоматически генерируемых)*/ 
VALUES (значение1, значение2); /* значения */

SELECT * FROM таблица; /* чтобы увидеть как выглядит таблица*/

SELECT columns FROM таблица; /* чтобы увидеть как выглядит конкретные столбцы таблицы*/

SELECT title AS Название, amount /* выбрать столбец amount и столбец title (для него задать псевдоним Название)*/
FROM book;

SELECT title, author, price, amount, /* выбрать столбцы */
     price * amount AS total /* умножить price на amount и вывести в столбце total */
FROM book;

/* Математическии функции */
CEILING(x)
-- возвращает наименьшее целое число, большее или равное x
-- (округляет до целого числа в большую сторону)	CEILING(4.2)=5
-- CEILING(-5.8)=-5
ROUND(x, k)	
-- округляет значение x до k знаков после запятой,
-- если k не указано – x округляется до целого	ROUND(4.361)=4
-- ROUND(5.86592,1)=5.9
FLOOR(x)
-- возвращает наибольшее целое число, меньшее или равное x
-- (округляет до  целого числа в меньшую сторону)	FLOOR(4.2)=4
-- FLOOR(-5.8)=-6
POWER(x, y)	
-- возведение x в степень y	POWER(3,4)=81.0
SQRT(x)	
-- квадратный корень из x	SQRT(4)=2.0
-- SQRT(2)=1.41...
DEGREES(x)
-- конвертирует значение x из радиан в градусы	DEGREES(3) = 171.8...
RADIANS(x)
-- конвертирует значение x из градусов в радианы	RADIANS(180)=3.14...
ABS(x)
-- модуль числа x	ABS(-1) = 1
-- ABS(1) = 1
PI()	pi = 3.1415926...

IF(логическое_выражение, выражение_1, выражение_2)
-- Функция вычисляет логическое_выражение, если оно истина – в поле заносится значение выражения_1, в противном случае –  значение выражения_2.
-- Все три параметра IF() являются обязательными.

Логическое выражение может включать операторы сравнения (
  равно «=», не равно «<>», больше «>», меньше «<», больше или равно«>=», меньше или равно «<=»
) и выражения, допустимые в SQL.

SELECT title, price 
FROM book
WHERE price < 600; /* условие */

Приоритеты операций:

круглые скобки
умножение  (*),  деление (/)
сложение  (+), вычитание (-)
операторы сравнения (=, >, <, >=, <=, <>)
NOT
AND
OR

SELECT title, author, price 
FROM book
WHERE price > 600 AND author = 'Булгаков М.А.';

Логическое выражение после ключевого слова WHERE может включать операторы  BETWEEN и IN.
Приоритет  у этих операторов такой же как у операторов сравнения, то есть они выполняются раньше, чем NOT, AND, OR.

Оператор BETWEEN позволяет отобрать данные, относящиеся к некоторому интервалу, включая его границы.